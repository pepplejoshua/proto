
template<typename Key, typename Value>
class HashMap {
// private:

public:
  std::map<Key, Value> contents;
  HashMap(std::initializer_list<typename std::pair<const Key, Value>> init) : contents(init) {}

  inline constexpr uint_pr len() const noexcept {
      return contents.size();
  }

  void insert(Key k, Value v) {
    contents.insert({k, v});
  }

  Value& operator[](Key key) {
    return contents[key];
  }

  const Value& operator[](Key key) const {
    return contents[key];
  }

  Option<Value> get(Key key) {
    const auto exists = contents.find(key);
    if (exists == contents.end()) {
      return Option<Value>();
    }

    return Option<Value>(exists->second);
  }

  const Option<Value> get(Key key) const {
    const auto exists = contents.find(key);
    if (exists == contents.end()) {
      return Option<Value>();
    }

    return Option<Value>(exists->second);
  }

  bool contains(Key key) const {
    return get(key).is_some();
  }

  str as_str() {
    str s = "{ ";
    int i = 0;
    for (const auto& [key, val] : *this) {
      defer(i += 1);
      s += "(";
      s += proto_str(key);
      s += ", ";
      s += proto_str(val);
      s += ")";

      if (i + 1 < len()) {
        s += ", ";
      }
    }
    s += " }";
    return s;
  }

  // Begin and end methods for range-based for loops
  inline auto begin() noexcept { return contents.begin(); }
  inline auto end() noexcept { return contents.end(); }
  inline const auto begin() const noexcept { return contents.begin(); }
  inline const auto end() const noexcept { return contents.end(); }
};

#include <type_traits>
#include <utility>
// Helper template to check if a type has an as_str() method
template <typename T>
class has_as_str {
private:
    template <typename U>
    static auto test(int) -> decltype(std::declval<U>().as_str(), std::true_type());

    template <typename>
    static std::false_type test(...);

public:
    static constexpr bool value = decltype(test<T>(0))::value;
};

// Overload for types with an as_str() method
template <typename T>
inline auto proto_str(T& t) -> typename std::enable_if<has_as_str<T>::value, str>::type {
    return t.as_str();
}

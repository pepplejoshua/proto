@register {
    pub fn add_i8(a i8, b i8) i8;
    pub fn sub_i8(a i8, b i8) i8;
    pub fn mul_i8(a i8, b i8) i8;
    pub fn div_i8(a i8, b i8) i8;
    pub fn rem_i8(a i8, b i8) i8;
    pub fn neg_i8(a i8) i8;
    pub fn lt_i8(a i8, b i8) bool;
    pub fn lte_i8(a i8, b i8) bool;
    pub fn gt_i8(a i8, b i8) bool;
    pub fn gte_i8(a i8, b i8) bool;
    pub fn eq_i8(a i8, b i8) bool;
    pub fn neq_i8(a i8, b i8) bool;

    pub fn add_i16(a i16, b i16) i16;
    pub fn sub_i16(a i16, b i16) i16;
    pub fn mul_i16(a i16, b i16) i16;
    pub fn div_i16(a i16, b i16) i16;
    pub fn rem_i16(a i16, b i16) i16;
    pub fn neg_i16(a i16) i16;
    pub fn lt_i16(a i16, b i16) bool;
    pub fn lte_i16(a i16, b i16) bool;
    pub fn gt_i16(a i16, b i16) bool;
    pub fn gte_i16(a i16, b i16) bool;
    pub fn eq_i16(a i16, b i16) bool;
    pub fn neq_i16(a i16, b i16) bool;

    pub fn add_i32(a i32, b i32) i32;
    pub fn sub_i32(a i32, b i32) i32;
    pub fn mul_i32(a i32, b i32) i32;
    pub fn div_i32(a i32, b i32) i32;
    pub fn rem_i32(a i32, b i32) i32;
    pub fn neg_i32(a i32) i32;
    pub fn lt_i32(a i32, b i32) bool;
    pub fn lte_i32(a i32, b i32) bool;
    pub fn gt_i32(a i32, b i32) bool;
    pub fn gte_i32(a i32, b i32) bool;
    pub fn eq_i32(a i32, b i32) bool;
    pub fn neq_i32(a i32, b i32) bool;

    pub fn add_i64(a i64, b i64) i64;
    pub fn sub_i64(a i64, b i64) i64;
    pub fn mul_i64(a i64, b i64) i64;
    pub fn div_i64(a i64, b i64) i64;
    pub fn rem_i64(a i64, b i64) i64;
    pub fn neg_i64(a i64) i64;
    pub fn lt_i64(a i64, b i64) bool;
    pub fn lte_i64(a i64, b i64) bool;
    pub fn gt_i64(a i64, b i64) bool;
    pub fn gte_i64(a i64, b i64) bool;
    pub fn eq_i64(a i64, b i64) bool;
    pub fn neq_i64(a i64, b i64) bool;

    pub fn add_isize(a isize, b isize) isize;
    pub fn sub_isize(a isize, b isize) isize;
    pub fn mul_isize(a isize, b isize) isize;
    pub fn div_isize(a isize, b isize) isize;
    pub fn rem_isize(a isize, b isize) isize;
    pub fn neg_isize(a isize) isize;
    pub fn lt_isize(a isize, b isize) bool;
    pub fn lte_isize(a isize, b isize) bool;
    pub fn gt_isize(a isize, b isize) bool;
    pub fn gte_isize(a isize, b isize) bool;
    pub fn eq_isize(a isize, b isize) bool;
    pub fn neq_isize(a isize, b isize) bool;

    pub fn add_u8(a u8, b u8) u8;
    pub fn sub_u8(a u8, b u8) u8;
    pub fn mul_u8(a u8, b u8) u8;
    pub fn div_u8(a u8, b u8) u8;
    pub fn rem_u8(a u8, b u8) u8;
    pub fn lt_u8(a u8, b u8) bool;
    pub fn lte_u8(a u8, b u8) bool;
    pub fn gt_u8(a u8, b u8) bool;
    pub fn gte_u8(a u8, b u8) bool;
    pub fn eq_u8(a u8, b u8) bool;
    pub fn neq_u8(a u8, b u8) bool;

    pub fn add_u16(a u16, b u16) u16;
    pub fn sub_u16(a u16, b u16) u16;
    pub fn mul_u16(a u16, b u16) u16;
    pub fn div_u16(a u16, b u16) u16;
    pub fn rem_u16(a u16, b u16) u16;
    pub fn lt_u16(a u16, b u16) bool;
    pub fn lte_u16(a u16, b u16) bool;
    pub fn gt_u16(a u16, b u16) bool;
    pub fn gte_u16(a u16, b u16) bool;
    pub fn eq_u16(a u16, b u16) bool;
    pub fn neq_u16(a u16, b u16) bool;

    pub fn add_u32(a u32, b u32) u32;
    pub fn sub_u32(a u32, b u32) u32;
    pub fn mul_u32(a u32, b u32) u32;
    pub fn div_u32(a u32, b u32) u32;
    pub fn rem_u32(a u32, b u32) u32;
    pub fn lt_u32(a u32, b u32) bool;
    pub fn lte_u32(a u32, b u32) bool;
    pub fn gt_u32(a u32, b u32) bool;
    pub fn gte_u32(a u32, b u32) bool;
    pub fn eq_u32(a u32, b u32) bool;
    pub fn neq_u32(a u32, b u32) bool;

    pub fn add_u64(a u64, b u64) u64;
    pub fn sub_u64(a u64, b u64) u64;
    pub fn mul_u64(a u64, b u64) u64;
    pub fn div_u64(a u64, b u64) u64;
    pub fn rem_u64(a u64, b u64) u64;
    pub fn lt_u64(a u64, b u64) bool;
    pub fn lte_u64(a u64, b u64) bool;
    pub fn gt_u64(a u64, b u64) bool;
    pub fn gte_u64(a u64, b u64) bool;
    pub fn eq_u64(a u64, b u64) bool;
    pub fn neq_u64(a u64, b u64) bool;

    pub fn add_usize(a usize, b usize) usize;
    pub fn sub_usize(a usize, b usize) usize;
    pub fn mul_usize(a usize, b usize) usize;
    pub fn div_usize(a usize, b usize) usize;
    pub fn rem_usize(a usize, b usize) usize;
    pub fn neg_usize(a usize) usize;
    pub fn lt_usize(a usize, b usize) bool;
    pub fn lte_usize(a usize, b usize) bool;
    pub fn gt_usize(a usize, b usize) bool;
    pub fn gte_usize(a usize, b usize) bool;
    pub fn eq_usize(a usize, b usize) bool;
    pub fn neq_usize(a usize, b usize) bool;
}

// method extensions for primitive types
:i8 {}
extend i8 {
    pub fn add(self i8, other i8) i8 {
        return add_i8(self, other);
    }

    pub fn sub(self i8, other i8) i8 {
        return sub_i8(self, other);
    }

    pub fn mul(self i8, other i8) i8 {
        return mul_i8(self, other);
    }

    pub fn div(self i8, other i8) i8 {
        return div_i8(self, other);
    }

    pub fn rem(self i8, other i8) i8 {
        return rem_i8(self, other);
    }

    pub fn neg(self i8) i8 {
        return neg_i8(self);
    }

    pub fn lt(self i8, other i8) bool {
        return lt_i8(self, other);
    }

    pub fn lte(self i8, other i8) bool {
        return lte_i8(self, other);
    }

    pub fn gt(self i8, other i8) bool {
        return gt_i8(self, other);
    }

    pub fn gte(self i8, other i8) bool {
        return gte_i8(self, other);
    }

    pub fn eq(self i8, other i8) bool {
        return eq_i8(self, other);
    }

    pub fn neq(self i8, other i8) bool {
        return neq_i8(self, other);
    }
}

:i16 {}
extend i16 {
    pub fn add(self i16, other i16) i16 {
        return add_i16(self, other);
    }

    pub fn sub(self i16, other i16) i16 {
        return sub_i16(self, other);
    }

    pub fn mul(self i16, other i16) i16 {
        return mul_i16(self, other);
    }

    pub fn div(self i16, other i16) i16 {
        return div_i16(self, other);
    }

    pub fn rem(self i16, other i16) i16 {
        return rem_i16(self, other);
    }

    pub fn neg(self i16) i16 {
        return neg_i16(self);
    }

    pub fn lt(self i16, other i16) bool {
        return lt_i16(self, other);
    }

    pub fn lte(self i16, other i16) bool {
        return lte_i16(self, other);
    }

    pub fn gt(self i16, other i16) bool {
        return gt_i16(self, other);
    }

    pub fn gte(self i16, other i16) bool {
        return gte_i16(self, other);
    }

    pub fn eq(self i16, other i16) bool {
        return eq_i16(self, other);
    }

    pub fn neq(self i16, other i16) bool {
        return neq_i16(self, other);
    }
}

:i32 {}
extend i32 {
    pub fn add(self i32, other i32) i32 {
        return add_i32(self, other);
    }

    pub fn sub(self i32, other i32) i32 {
        return sub_i32(self, other);
    }

    pub fn mul(self i32, other i32) i32 {
        return mul_i32(self, other);
    }

    pub fn div(self i32, other i32) i32 {
        return div_i32(self, other);
    }

    pub fn rem(self i32, other i32) i32 {
        return rem_i32(self, other);
    }

    pub fn neg(self i32) i32 {
        return neg_i32(self);
    }

    pub fn lt(self i32, other i32) bool {
        return lt_i32(self, other);
    }

    pub fn lte(self i32, other i32) bool {
        return lte_i32(self, other);
    }

    pub fn gt(self i32, other i32) bool {
        return gt_i32(self, other);
    }

    pub fn gte(self i32, other i32) bool {
        return gte_i32(self, other);
    }

    pub fn eq(self i32, other i32) bool {
        return eq_i32(self, other);
    }

    pub fn neq(self i32, other i32) bool {
        return neq_i32(self, other);
    }
}

:i64 {}
extend i64 {
    pub fn add(self i64, other i64) i64 {
        return add_i64(self, other);
    }

    pub fn sub(self i64, other i64) i64 {
        return sub_i64(self, other);
    }

    pub fn mul(self i64, other i64) i64 {
        return mul_i64(self, other);
    }

    pub fn div(self i64, other i64) i64 {
        return div_i64(self, other);
    }

    pub fn rem(self i64, other i64) i64 {
        return rem_i64(self, other);
    }

    pub fn neg(self i64) i64 {
        return neg_i64(self);
    }

    pub fn lt(self i64, other i64) bool {
        return lt_i64(self, other);
    }

    pub fn lte(self i64, other i64) bool {
        return lte_i64(self, other);
    }

    pub fn gt(self i64, other i64) bool {
        return gt_i64(self, other);
    }

    pub fn gte(self i64, other i64) bool {
        return gte_i64(self, other);
    }

    pub fn eq(self i64, other i64) bool {
        return eq_i64(self, other);
    }

    pub fn neq(self i64, other i64) bool {
        return neq_i64(self, other);
    }
}

:isize {}
extend isize {
    pub fn add(self isize, other isize) isize {
        return add_isize(self, other);
    }

    pub fn sub(self isize, other isize) isize {
        return sub_isize(self, other);
    }

    pub fn mul(self isize, other isize) isize {
        return mul_isize(self, other);
    }

    pub fn div(self isize, other isize) isize {
        return div_isize(self, other);
    }

    pub fn rem(self isize, other isize) isize {
        return rem_isize(self, other);
    }

    pub fn neg(self isize) isize {
        return neg_isize(self);
    }

    pub fn lt(self isize, other isize) bool {
        return lt_isize(self, other);
    }

    pub fn lte(self isize, other isize) bool {
        return lte_isize(self, other);
    }

    pub fn gt(self isize, other isize) bool {
        return gt_isize(self, other);
    }

    pub fn gte(self isize, other isize) bool {
        return gte_isize(self, other);
    }

    pub fn eq(self isize, other isize) bool {
        return eq_isize(self, other);
    }

    pub fn neq(self isize, other isize) bool {
        return neq_isize(self, other);
    }
}

:u8 {}
extend u8 {
    pub fn add(self u8, other u8) u8 {
        return add_u8(self, other);
    }

    pub fn sub(self u8, other u8) u8 {
        return sub_u8(self, other);
    }

    pub fn mul(self u8, other u8) u8 {
        return mul_u8(self, other);
    }

    pub fn div(self u8, other u8) u8 {
        return div_u8(self, other);
    }

    pub fn rem(self u8, other u8) u8 {
        return rem_u8(self, other);
    }

    pub fn neg(self u8) u8 {
        return neg_u8(self);
    }

    pub fn lt(self u8, other u8) bool {
        return lt_u8(self, other);
    }

    pub fn lte(self u8, other u8) bool {
        return lte_u8(self, other);
    }

    pub fn gt(self u8, other u8) bool {
        return gt_u8(self, other);
    }

    pub fn gte(sel u8f, other u8) bool {
        return gte_u8(self, other);
    }

    pub fn eq(self u8, other u8) bool {
        return eq_u8(self, other);
    }

    pub fn neq(self u8, other u8) bool {
        return neq_u8(self, other);
    }
}

:u16 {}
extend u16 {
    pub fn add(self u16, other u16) u16 {
        return add_u16(self, other);
    }

    pub fn sub(self u16, other u16) u16 {
        return sub_u16(self, other);
    }

    pub fn mul(self u16, other u16) u16 {
        return mul_u16(self, other);
    }

    pub fn div(self u16, other u16) u16 {
        return div_u16(self, other);
    }

    pub fn rem(self u16, other u16) u16 {
        return rem_u16(self, other);
    }

    pub fn neg(self u16) u16 {
        return neg_u16(self);
    }

    pub fn lt(self u16, other u16) bool {
        return lt_u16(self, other);
    }

    pub fn lte(self u16, other u16) bool {
        return lte_u16(self, other);
    }

    pub fn gt(self u16, other u16) bool {
        return gt_u16(self, other);
    }

    pub fn gte(self u16, other u16) bool {
        return gte_u16(self, other);
    }

    pub fn eq(self u16, other u16) bool {
        return eq_u16(self, other);
    }

    pub fn neq(self u16, other u16) bool {
        return neq_u16(self, other);
    }
}

:u32 {}
extend u32 {
    pub fn add(self u32, other u32) u32 {
        return add_u32(self, other);
    }

    pub fn sub(self u32, other u32) u32 {
        return sub_u32(self, other);
    }

    pub fn mul(self u32, other u32) u32 {
        return mul_u32(self, other);
    }

    pub fn div(self u32, other u32) u32 {
        return div_u32(self, other);
    }

    pub fn rem(self u32, other u32) u32 {
        return rem_u32(self, other);
    }

    pub fn neg(self u32) u32 {
        return neg_u32(self);
    }

    pub fn lt(self u32, other u32) bool {
        return lt_u32(self, other);
    }

    pub fn lte(self u32, other u32) bool {
        return lte_u32(self, other);
    }

    pub fn gt(self u32, other u32) bool {
        return gt_u32(self, other);
    }

    pub fn gte(self u32, other u32) bool {
        return gte_u32(self, other);
    }

    pub fn eq(self u32, other u32) bool {
        return eq_u32(self, other);
    }

    pub fn neq(self u32, other u32) bool {
        return neq_u32(self, other);
    }
}

:u64 {}
extend u64 {
    pub fn add(self u64, other u64) u64 {
        return add_u64(self, other);
    }

    pub fn sub(self u64, other u64) u64 {
        return sub_u64(self, other);
    }

    pub fn mul(self u64, other u64) u64 {
        return mul_u64(self, other);
    }

    pub fn div(self u64, other u64) u64 {
        return div_u64(self, other);
    }

    pub fn rem(self u64, other u64) u64 {
        return rem_u64(self, other);
    }

    pub fn neg(self u64) u64 {
        return neg_u64(self);
    }

    pub fn lt(self u64, other u64) bool {
        return lt_u64(self, other);
    }

    pub fn lte(self u64, other u64) bool {
        return lte_u64(self, other);
    }

    pub fn gt(self u64, other u64) bool {
        return gt_u64(self, other);
    }

    pub fn gte(self u64, other u64) bool {
        return gte_u64(self, other);
    }

    pub fn eq(self u64, other u64) bool {
        return eq_u64(self, other);
    }

    pub fn neq(self u64, other u64) bool {
        return neq_u64(self, other);
    }
}

:usize {}
extend usize {
    pub fn add(self usize, other usize) usize {
        return add_usize(self, other);
    }

    pub fn sub(self usize, other usize) usize {
        return sub_usize(self, other);
    }

    pub fn mul(self usize, other usize) usize {
        return mul_usize(self, other);
    }

    pub fn div(self usize, other usize) usize {
        return div_usize(self, other);
    }

    pub fn rem(self usize, other usize) usize {
        return rem_usize(self, other);
    }

    pub fn neg(self usize) usize {
        return neg_usize(self);
    }

    pub fn lt(self usize, other usize) bool {
        return lt_usize(self, other);
    }

    pub fn lte(self usize, other usize) bool {
        return lte_usize(self, other);
    }

    pub fn gt(self usize, other usize) bool {
        return gt_usize(self, other);
    }

    pub fn gte(self usize, other usize) bool {
        return gte_usize(self, other);
    }

    pub fn eq(self usize, other usize) bool {
        return eq_usize(self, other);
    }

    pub fn neq(self usize, other usize) bool {
        return neq_usize(self, other);
    }
}

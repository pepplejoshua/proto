@register {
    pub fn add_i8(a i8, b i8) i8;
    pub fn sub_i8(a i8, b i8) i8;
    pub fn mul_i8(a i8, b i8) i8;
    pub fn div_i8(a i8, b i8) i8;
    pub fn rem_i8(a i8, b i8) i8;
    pub fn neg_i8(a i8) i8;
    pub fn lt_i8(a i8, b i8) bool;
    pub fn lte_i8(a i8, b i8) bool;
    pub fn gt_i8(a i8, b i8) bool;
    pub fn gte_i8(a i8, b i8) bool;
    pub fn eq_i8(a i8, b i8) bool;
    pub fn neq_i8(a i8, b i8) bool;

    pub fn add_i16(a i16, b i16) i16;
    pub fn sub_i16(a i16, b i16) i16;
    pub fn mul_i16(a i16, b i16) i16;
    pub fn div_i16(a i16, b i16) i16;
    pub fn rem_i16(a i16, b i16) i16;
    pub fn neg_i16(a i16) i16;
    pub fn lt_i16(a i16, b i16) bool;
    pub fn lte_i16(a i16, b i16) bool;
    pub fn gt_i16(a i16, b i16) bool;
    pub fn gte_i16(a i16, b i16) bool;
    pub fn eq_i16(a i16, b i16) bool;
    pub fn neq_i16(a i16, b i16) bool;

    pub fn add_i32(a i32, b i32) i32;
    pub fn sub_i32(a i32, b i32) i32;
    pub fn mul_i32(a i32, b i32) i32;
    pub fn div_i32(a i32, b i32) i32;
    pub fn rem_i32(a i32, b i32) i32;
    pub fn neg_i32(a i32) i32;
    pub fn lt_i32(a i32, b i32) bool;
    pub fn lte_i32(a i32, b i32) bool;
    pub fn gt_i32(a i32, b i32) bool;
    pub fn gte_i32(a i32, b i32) bool;
    pub fn eq_i32(a i32, b i32) bool;
    pub fn neq_i32(a i32, b i32) bool;

    pub fn add_i64(a i64, b i64) i64;
    pub fn sub_i64(a i64, b i64) i64;
    pub fn mul_i64(a i64, b i64) i64;
    pub fn div_i64(a i64, b i64) i64;
    pub fn rem_i64(a i64, b i64) i64;
    pub fn neg_i64(a i64) i64;
    pub fn lt_i64(a i64, b i64) bool;
    pub fn lte_i64(a i64, b i64) bool;
    pub fn gt_i64(a i64, b i64) bool;
    pub fn gte_i64(a i64, b i64) bool;
    pub fn eq_i64(a i64, b i64) bool;
    pub fn neq_i64(a i64, b i64) bool;

    pub fn add_isize(a isize, b isize) isize;
    pub fn sub_isize(a isize, b isize) isize;
    pub fn mul_isize(a isize, b isize) isize;
    pub fn div_isize(a isize, b isize) isize;
    pub fn rem_isize(a isize, b isize) isize;
    pub fn neg_isize(a isize) isize;
    pub fn lt_isize(a isize, b isize) bool;
    pub fn lte_isize(a isize, b isize) bool;
    pub fn gt_isize(a isize, b isize) bool;
    pub fn gte_isize(a isize, b isize) bool;
    pub fn eq_isize(a isize, b isize) bool;
    pub fn neq_isize(a isize, b isize) bool;

    pub fn add_u8(a u8, b u8) u8;
    pub fn sub_u8(a u8, b u8) u8;
    pub fn mul_u8(a u8, b u8) u8;
    pub fn div_u8(a u8, b u8) u8;
    pub fn rem_u8(a u8, b u8) u8;
    pub fn lt_u8(a u8, b u8) bool;
    pub fn lte_u8(a u8, b u8) bool;
    pub fn gt_u8(a u8, b u8) bool;
    pub fn gte_u8(a u8, b u8) bool;
    pub fn eq_u8(a u8, b u8) bool;
    pub fn neq_u8(a u8, b u8) bool;

    pub fn add_u16(a u16, b u16) u16;
    pub fn sub_u16(a u16, b u16) u16;
    pub fn mul_u16(a u16, b u16) u16;
    pub fn div_u16(a u16, b u16) u16;
    pub fn rem_u16(a u16, b u16) u16;
    pub fn lt_u16(a u16, b u16) bool;
    pub fn lte_u16(a u16, b u16) bool;
    pub fn gt_u16(a u16, b u16) bool;
    pub fn gte_u16(a u16, b u16) bool;
    pub fn eq_u16(a u16, b u16) bool;
    pub fn neq_u16(a u16, b u16) bool;

    pub fn add_u32(a u32, b u32) u32;
    pub fn sub_u32(a u32, b u32) u32;
    pub fn mul_u32(a u32, b u32) u32;
    pub fn div_u32(a u32, b u32) u32;
    pub fn rem_u32(a u32, b u32) u32;
    pub fn lt_u32(a u32, b u32) bool;
    pub fn lte_u32(a u32, b u32) bool;
    pub fn gt_u32(a u32, b u32) bool;
    pub fn gte_u32(a u32, b u32) bool;
    pub fn eq_u32(a u32, b u32) bool;
    pub fn neq_u32(a u32, b u32) bool;

    pub fn add_u64(a u64, b u64) u64;
    pub fn sub_u64(a u64, b u64) u64;
    pub fn mul_u64(a u64, b u64) u64;
    pub fn div_u64(a u64, b u64) u64;
    pub fn rem_u64(a u64, b u64) u64;
    pub fn lt_u64(a u64, b u64) bool;
    pub fn lte_u64(a u64, b u64) bool;
    pub fn gt_u64(a u64, b u64) bool;
    pub fn gte_u64(a u64, b u64) bool;
    pub fn eq_u64(a u64, b u64) bool;
    pub fn neq_u64(a u64, b u64) bool;

    pub fn add_usize(a usize, b usize) usize;
    pub fn sub_usize(a usize, b usize) usize;
    pub fn mul_usize(a usize, b usize) usize;
    pub fn div_usize(a usize, b usize) usize;
    pub fn rem_usize(a usize, b usize) usize;
    pub fn neg_usize(a usize) usize;
    pub fn lt_usize(a usize, b usize) bool;
    pub fn lte_usize(a usize, b usize) bool;
    pub fn gt_usize(a usize, b usize) bool;
    pub fn gte_usize(a usize, b usize) bool;
    pub fn eq_usize(a usize, b usize) bool;
    pub fn neq_usize(a usize, b usize) bool;
}

template<typename T, std::size_t N>
class Array {
public:
    T data[N] = {};

    Array(std::initializer_list<T> init) {
        std::copy(init.begin(), init.end(), data);
    }

    T& operator[](std::size_t index) {
        return data[index];
    }

    const T& operator[](std::size_t index) const {
        return data[index];
    }

    Option<T> get(std::size_t index) {
        if (index > N-1) {
            return Option<T>();
        }

        return Option<T>(data[index]);
    }

    std::size_t len() const {
        return N;
    }

    // Begin and end methods for range-based for loops
    T* begin() noexcept { return data; }
    T* end() noexcept { return data + N; }
    const T* begin() const noexcept { return data; }
    const T* end() const noexcept { return data + N; }
};

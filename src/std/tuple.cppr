template<typename... Types>
class Tuple {
private:
  std::tuple<Types...> data;
public:
  Tuple(Types... args) : data(std::move(args)...) {}
  template<uint_pr Index>
  auto& get() {
    return std::get<Index>(data);
  }
  static constexpr uint_pr len() {
    return sizeof...(Types);
  }
  // Helper function to concatenate strings with a separator
  template<std::size_t... Is>
  str proto_str_helper_tuple(std::index_sequence<Is...>) {
      str content = "(";
      ((content += (Is == 0 ? "" : ", ") + proto_str(std::get<Is>(data))), ...);
      content += ")";
      return content;
  }

  str as_str() {
      return proto_str_helper_tuple(std::make_index_sequence<len()>{});
  }
};
template<typename... Types>
str proto_str(Tuple<Types...>& tuple) {
  return tuple.as_str();
}

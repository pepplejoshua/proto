fn main() int {
  // type annotated with size
  a : [3, bool] : [false, false, true];
  // infer size with type annotation
  b : [_, i8] : [1, 2, 3];
  // infer size and type
  c : [_, _] : ["abc", "def", "ghi"];
  // no type at all
  d :: ['a'. 'e', 'i', 'o', 'u'];

  // static array type can have:
  // - size usize or underscore identifier to infer from number of items.
  // - type or underscore identifier to infer from type of first item or suffix type of array init
  // static array expression can have:
  // - array section with the expected number of items (cannot be changed).

  return 0;
}

struct Empty {}

type Byte = u8
type IntPair = Pair(int)
type BoolPair = Pair(bool)
type IntBoolPair = DisjointPair(int, bool)

struct Pair(T) {
    lhs T
    rhs T
}

struct DisjointPair(Lhs, Rhs) {
    lhs Lhs
    rhs Rhs
}

struct LinkedList(T) {
    data T
    next ?*Self
}

impl LinkedList(T) {
    fn init(data T) Self {
        return .{
            data,
            next = none,
        }
    }

    fn extend(self *Self, next_node *Self) void {
        if self.next.is_none() {
            self.next = some next_node
        } else {
            var n_node = self.next.unwrap()
            n_node.extend(next_node)
        }
    }
}

// the entry point of the program
fn main() int {
    // initialize struct and assign them to variables.
    // Variables are declared with := with an optional type between : and =.
    var pair = IntPair {
        lhs = 1,
        rhs = 2,
    }
    var pair2 = BoolPair {
        lhs = true,
        rhs = false,
    }
    var pair3 = IntBoolPair {
        lhs = 420,
        rhs = false,
    }
    return 0
}

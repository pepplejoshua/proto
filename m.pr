// generates trait struct
trait X {
    fn do_stuff(a str) void
}

// generates trait struct
trait Y {
    fn do_other_thing() void
}

struct A[X] {
    fn init() void {}
    fn do_stuff(a str) void {
        println("A does stuff with " + a);
    }
}

struct B[X, Y] {
    b : int

    fn init(_b int) {
        self.b = _b
    }
    fn do_stuff(a str) void {
        println(`B({b}) does stuff with ` + a)
    }
    fn do_thing() void {
        println(`B({b}) is doing thing`)
    }
}

// does not need to generate
fn do_something(x impl[X]) void {
    x.do_stuff("some string")
}

// it will need to generate an auxillary struct that combines the
// trait structs X and Y
fn do_2_things(x impl[X, Y]) void {
    x.do_stuff("some string")
    x.do_thing()
}

fn main() int {
    a :: A()
    b :: B(420)

    do_something(a)
    do_something(b)
    do_2_things(b)

    return 0
}

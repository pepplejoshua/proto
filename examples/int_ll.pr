struct Node {
    val : int; next : ?*Node
    fn init(v int, n ?*Node) void {
        self.val = v; self.next = n
    }
}

fn main() int {
    fifth := new(Node, 1, none); defer free(fifth)
    fourth := new(Node, 2, some fifth); defer free(fourth)
    third := new(Node, 3, some fourth); defer free(third)
    second := new(Node, 4, some third); defer free(second)
    head := new(Node, 5, some second); defer free(head)

    cur := some head
    for cur.is_some() {
        node :: *(cur.unwrap())
        println(`{node.val}`)
        cur = node.next
    }
    return 0
}

// Lempel–Ziv–Welch compression/decompression algorithm
fn compress(uncompressed str) [i32] {
    dict_size := 256; dict : {str, i32} = {}
    for (i := 0; i < dict_size; i += 1) {
        dict.insert(`{make_char(i)}`, i)
    }
    res := new([i32]); w := ""
    for ch in uncompressed {
        wc :: w + ch
        if dict.contains(wc) {
            w = wc
        } else {
            res.append(dict[w])
            dict.insert(wc, dict_size)
            dict_size += 1
            w = `{ch}`
        }
    }
    if w.len() > 0 { res.append(dict[w]) }
    return res
}

fn decompress(compressed [i32]) ?str {
    dict_size := 256; dict : {i32, str} = {}
    for (i := 0; i < dict_size; i += 1) {
        dict.insert(i, `{make_char(i)}`)
    }
    w := `{make_char(compressed[0])}`;
    res := w
    for (i : u32 = 1; i < compressed.len(); i += 1) {
        k :: compressed[i]
        entry := ""
        if dict.contains(k) {
            entry = dict[k]
        } else if k == dict_size {
            entry = w + w[0]
        } else {
            return none
        }

        res += entry
        dict[dict_size] = w + entry[0]
        dict_size += 1
        w = entry
    }

    return some res
}

fn main() i32 {
    half :: "ABABABABABABABABABABABABABABABC"
    println(`{a.len()}`)
    uncompressed :: half + half
    compressed := compress(uncompressed)
    decompressed :: decompress(compressed)
    println(`uncompressed: {uncompressed}, len: {uncompressed.len()}`)
    println(`compressed:   {compressed}, len: {compressed.len()}`)

    if decompressed.is_some() {
        decomp :: decompressed.unwrap()
        println(`uncompressed: {decomp}, len: {decomp.len()}`)
        println("decompression successful!")
    } else {
        println("decompression failed.")
    }

    return 0
}

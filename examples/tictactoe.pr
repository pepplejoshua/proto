struct Board {
    Arr: [char],
    RowSize: i64,
}

let win_rules = [
        // diagonals
        [0, 4, 8], [2, 4, 6],

        // horizontals
        [0, 1, 2], [3, 4, 5], [6, 7, 8],

        // verticals
        [0, 3, 6], [1, 4, 7], [2, 5, 8],
    ];

fn check_game_over(board: Board) -> (char, bool) {
    for mut i = 0; i < len(win_rules); i += 1 {
        let rule = win_rules[i];
        let a = rule[0];
        let b = rule[1];
        let c = rule[2];

        let ch_a = board.Arr[a];
        let ch_b = board.Arr[b];
        let ch_c = board.Arr[c];
        println(stringf("{#} is {#}, {#} is {#}, {#} is {#}", a, ch_a, b, ch_b, c, ch_c));

        // fix if else
        // - remove mandatory unit
        // - make sure jump points to the right part of else (randomly pushes unit onto stack)
        // - make sure returns are working correctly (return true doesn't work)
        if ch_a == ch_b && ch_b == ch_c && ch_a == 'x' {
            return (ch_a, true);
        } else {
            continue;
        }
    }

    ('-', false)
}

fn main() {
    let arr = ['x', 'x', 'x', '-', '-', '-', '-', '-', '-'];
    mut b: Board = Board {
    Arr: arr,
    RowSize: 3,
    };

    let game_over_test = check_game_over(b);
    if game_over_test.1 {
        println(stringf("game over. {#} is the winner.", game_over_test.0));
    }
}
